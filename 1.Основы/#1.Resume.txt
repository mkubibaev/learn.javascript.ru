1.Основы JavaScript
	1.1 alert
	1.2 Внешние скрипты, порядок исполнения (async, defer)
	1.3 Структура кода
	1.4 Современный стандарт, "use strict"
	1.5 Переменные
	1.6 Правильный выбор имени переменной
		 - camelCase
	1.7 Шесть типов данных, typeof
		 - number(infinity, NaN),string,boolean,null,undefined,object
	1.8 Основные операторы
		 - «унарный», «бинарный», «операнд»
	1.9 Операторы сравнения и логические значения
		 - В JavaScript есть логические значения true (истина) и false (ложь).Операторы сравнения возвращают их.
		 - Строки сравниваются побуквенно.
		 - Значения разных типов приводятся к числу при сравнении, за исключением строгого равенства === (!==).
		 - Значения null и undefined равны == друг другу и не равны ничему другому. В других сравнениях (с участием >,<) их лучше не использовать, так как они ведут себя не как 0.
	1.10 Побитовые операторы
		  - надо повторить
	1.11 Взаимодействие с пользователем: alert, prompt, confirm
		  - alert выводит сообщение.
		  - prompt выводит сообщение и ждёт, пока пользователь введёт текст, а затем возвращает введённое значение или null, если ввод отменён (CANCEL/Esc).
		  - confirm выводит сообщение и ждёт, пока пользователь нажмёт «OK» или «CANCEL» и возвращает true/false.
	1.12 Условные операторы: if, '?'
		  - Число 0, пустая строка "", null и undefined, а также NaN являются false,
		  - Остальные значения – true.
		  - ? - тернарный оператор
	1.13 Логические операторы || (ИЛИ), && (И) и ! (НЕ)
		  - оператор || вычисляет операнды слева направо до первого «истинного» и возвращает его, а если все ложные – то последнее значение.
		  - оператор && вычисляет операнды слева направо до первого «ложного» и возвращает его, а если все истинные – то последнее значение.
		  - Приоритет у && больше, чем у ||	
		  - двойное !! (НЕ) используют для преобразования значений к логическому типу
	1.14 Преобразование типов для примитивов
		  В JavaScript есть три преобразования:
		  - Строковое: String(value) – в строковом контексте или при сложении со строкой. Работает очевидным образом.
		  - Численное: Number(value) – в численном контексте, включая унарный плюс +value. Происходит при сравнении разных типов, кроме строгого равенства.
		  - Логическое: Boolean(value) – в логическом контексте, можно также сделать двойным НЕ: !!value.
	1.15 Циклы while, for
		  JavaScript поддерживает три вида циклов:
		  while – проверка условия перед каждым выполнением.
		  do..while – проверка условия после каждого выполнения.
		  for – проверка условия перед каждым выполнением, а также дополнительные настройки.
		  Чтобы организовать бесконечный цикл, используют конструкцию while(true). При этом он, как и любой другой цикл, может быть прерван директивой break.
		  Если на данной итерации цикла делать больше ничего не надо, но полностью прекращать цикл не следует – используют директиву continue.
		  Обе этих директивы поддерживают «метки», которые ставятся перед циклом. Метки – единственный способ для break/continue повлиять на выполнение внешнего цикла.
		  Заметим, что метки не позволяют прыгнуть в произвольное место кода, в JavaScript нет такой возможности.
	1.16 Конструкция switch
		 - case проверяет на абсоютное равенство ===
		 - если в верном case нету break, то выполнятся все последующие case без сравнения. 
	1.17 Функции
		 - Передаваемые значения копируются в параметры функции и становятся локальными переменными 
		 - Параметры функции копируются в её локальные переменные
		 - Можно объявить новые локальные переменные при помощи var
		 - Значение возвращается оператором return ...
		 - Вызов return тут же прекращает функцию
		 - Если return; вызван без значения, или функция завершилась без return, то её результат равен undefined
		 - При обращении к необъявленной переменной функция будет искать внешнюю переменную с таким именем (если не найдет, создаст глобальную переменную), но лучше, если функция использует только локальные переменные:
			* Это делает очевидным общий поток выполнения – что передаётся в функцию и какой получаем результат.
			* Это предотвращает возможные конфликты доступа, когда две функции, возможно написанные в разное время или разными людьми, неожиданно друг для друга меняют одну и ту же внешнюю переменную
		 - Функция – это действие, поэтому для имён функций, как правило, используются глаголы
		 - Одна функция – одно действие !
	1.18 Функциональные выражения
		 - Function Declaration 
		 	* создаются интерпретатором до выполнения кода
		 	* при use strict видны только внутри блока, в котором объявлены
		 - Function Expression
		 	* создаются когда управление достигает строки с функцией	 
	1.19 Рекурсия, стек
		 - Рекурсия – это когда функция вызывает сама себя, как правило, с другими аргументами.
		 - У каждого вызова функции есть свой «контекст выполнения» (execution context) 		
	1.20 Именованные функциональные выражения (Named Function Expression)	 
		 - NFE используется в первую очередь в тех ситуациях, когда функцию нужно передавать в другое место кода или перемещать из одной переменной в другую. Внутреннее имя позволяет функции надёжно обращаться к самой себе, где бы она ни находилась
		 - Если функция задана как Function Expression, ей можно дать имя
	1.21 Всё вместе: особенности JavaScript
		 - Структура кода 	 
		 - Переменные и типы
		 - Строгий режим ('use strict')
		 - Взаимодействие с посетителем
		 - Особенности операторов
		 	* Если хоть один аргумент – строка, то другой тоже приводится к строке
		 - Логические операторы
		 - Циклы
		 	* Переменную можно объявлять прямо в цикле, но видна она будет и за его пределами
		 	* Поддерживаются директивы break/continue для выхода из цикла/перехода на следующую итерацию
		 	* Для выхода одновременно из нескольких уровней цикла можно задать метку
		 	* Переход на метку возможен только изнутри цикла, и только на внешний блок по отношению к данному циклу. В произвольное место программы перейти нельзя
		 - Конструкция switch
		 	* При сравнениях в конструкции switch используется оператор ===
		 - Функции
		 	* Function Declaration и Expression
		 	* Named Function Expression	